/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cachecoherencesimulation;

import java.util.concurrent.Semaphore;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * This class implements a processor block, composed of CPU unit, a Cache memory block and
 * a cache controller. Make the connections between element and check all event being an asinchronous thread.
 * @author daniel
 */
public class ProcessorBlock extends Thread {
    Cpu cpu;//cpu instance
    CacheController controller;//cache controller instance
    private boolean usingBus, BW, BR;//outputs variables
    private int busDirectionIn, busDirectionOut, busDataOut, busDataIn, busIdentifier;
    private String busRequestType;
    private String pbName;
    private long clockTimeBus;

    private Thread t;

    public ProcessorBlock(int id) {
        
        this.pbName = "ProcessorBlock" + id;//set inital values
        this.controller = new CacheController("Controlador" + id);//create new cache controller 
        this.cpu = new Cpu(id);//create a new cpu
        this.usingBus = false;//set initial flags values
        this.BW = false;
        this.BR = false;
        this.busDirectionIn = -1;
        this.busDirectionOut = -1;
        this.busRequestType = "";
        this.clockTimeBus = 0;
        this.busDataIn = 0;
        this.cpu.start();//start cpu thread

    }

    /**
     * Start a new connection of all the values of the cpu
     * included data, address, identifier..
     */
    private void CPUconnection() {
        if (!cpu.getReadRequest()) {//check if request is avaliable
            String operation = cpu.getRequest();//get the random values generated by the cpu
            int direction = cpu.getDirection();
            int data = cpu.getData();

            busDataOut = data;//set the output buffers of data, address and identifier
            busDirectionOut = direction;
            busIdentifier = cpu.getIdentifier();
       
            int busSignalOut = controller.connectCacheCpu(operation, direction, data);
            if (busSignalOut == 1) {//value for BW generated to others processor blocks
                cpu.pauseCpu();//stop cpu to wait for a bus connection
                busRequestType = "BW";//set the type of signal to be generated
                this.clockTimeBus = System.nanoTime();//get the specific time of requesting event
                usingBus = true;//set the flag of bus usage

            } else if (busSignalOut == 2) {//value for BR generated to others processor blocks
                cpu.pauseCpu();
                busRequestType = "BR";
                this.clockTimeBus = System.nanoTime();
                usingBus = true;

            }

            cpu.setReadRequest(true);//set this flag to avoid checking the cpu data when it is read at all
        }
    }

    /**
     * infinity loop of the processor block
     */
    @Override
    public void run() {

        try {

            for (;;) {
                
      
                    busCheck();//checking the bus lines to read BW or BR
                    CPUconnection();//set a new connection of the cpu - cache
                    Thread.sleep(50);//process repeated each 50 ms
                    if(controller.getMissSignal() >= 1){controller.decrementMissSignal();}
                    while (usingBus) {//this block pause cpu for waiting to connect and comunicate

                        busCheck();//check bus
                        cpu.pauseCpu();//maintain paused the cpu
                        Thread.sleep(50);
                    }
                    cpu.resumeCpu();//resume the paused cpu

            }

        } catch (InterruptedException e) {

            System.out.println("sleep interrupted");
        }
    }

    /**
     * Process of checking the bus of input signals BW or BR
     */
    private void busCheck() {
        
        if (busDirectionIn != busDirectionOut) {//check the bus for all cache lines, except the line being executed
            controller.busRead(BW, BR, busDirectionIn);//set the petition to read the bus to controller
        }
    }

    /**
     * start the processor block thread
     */
    @Override
    public void start() {
        if (t == null) {
            t = new Thread(this);
            t.start();
        }
    }
    
    /**
     * getter of the time of a specified event.
     * @return time nanoseconds
     */
    public long getTime(){
        return clockTimeBus;
    }

    /**
     * set bus write flag
     * @param BW 
     */
    public void setBW(boolean BW) {
        this.BW = BW;
    }

    /**
     * set bus read flag
     * @param BR 
     */
    public void setBR(boolean BR) {
        this.BR = BR;
    }
    /**
     * set the value of the data read from memory
     * @param dataIn the data
     */
    public void setBusDataIn(int dataIn){
        this.busDataIn = dataIn;
    }
   
    /**
     * set the value of the address read from others processor units
     * @param busDirection  bus direction
     */
    public void setBusDirectionIn(int busDirection) {
        this.busDirectionIn = busDirection;
    }

    /**
     * set the data of the output buffer
     * @param busDataOut 
     */
    public void setBusDataOut(int busDataOut) {
        this.busDataOut = busDataOut;
    }

    /**
     * getter of the address to be requested to bus
     * @return the address
     */
    public int getBusDirectionOut() {
        return busDirectionOut;
    }

    /**
     * getter of the value of the data to be sent to bus
     * @return 
     */
    public int getBusDataOut() {
        return busDataOut;
    }

    /**
     * getter of bus identifier
     * @return  processor id
     */
    public int getBusIdentifier() {
        return busIdentifier;
    }
    
    /**
     * getter of using bus flag
     * @return usingBus flag
     */
    public boolean getUsingBus(){
        return this.usingBus;
    }
   
    /**
     * setter of the usingBus flag
     * @param used the status of the flag
     */
    public void setUsingBus(boolean used){
        this.usingBus = used;
    }

    /**
     * getter of the bus request type Bus Write or Bus Read.
     * @return bus reques type
     */
    public String getBusRequestType() {
        return busRequestType;
    }


  
    
    

    
}
